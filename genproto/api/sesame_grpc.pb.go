// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: sesame/v1alpha1/sesame.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SesameClient is the client API for Sesame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SesameClient interface {
	CreateRemote(ctx context.Context, in *CreateRemoteRequest, opts ...grpc.CallOption) (*Remote, error)
	GetRemote(ctx context.Context, in *GetRemoteRequest, opts ...grpc.CallOption) (*Remote, error)
	DeleteRemote(ctx context.Context, in *DeleteRemoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRemote(ctx context.Context, in *UpdateRemoteRequest, opts ...grpc.CallOption) (*Remote, error)
	ListRemotes(ctx context.Context, in *ListRemotesRequest, opts ...grpc.CallOption) (*ListRemotesResponse, error)
	CallMethod(ctx context.Context, opts ...grpc.CallOption) (Sesame_CallMethodClient, error)
}

type sesameClient struct {
	cc grpc.ClientConnInterface
}

func NewSesameClient(cc grpc.ClientConnInterface) SesameClient {
	return &sesameClient{cc}
}

func (c *sesameClient) CreateRemote(ctx context.Context, in *CreateRemoteRequest, opts ...grpc.CallOption) (*Remote, error) {
	out := new(Remote)
	err := c.cc.Invoke(ctx, "/sesame.v1alpha1.Sesame/CreateRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sesameClient) GetRemote(ctx context.Context, in *GetRemoteRequest, opts ...grpc.CallOption) (*Remote, error) {
	out := new(Remote)
	err := c.cc.Invoke(ctx, "/sesame.v1alpha1.Sesame/GetRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sesameClient) DeleteRemote(ctx context.Context, in *DeleteRemoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sesame.v1alpha1.Sesame/DeleteRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sesameClient) UpdateRemote(ctx context.Context, in *UpdateRemoteRequest, opts ...grpc.CallOption) (*Remote, error) {
	out := new(Remote)
	err := c.cc.Invoke(ctx, "/sesame.v1alpha1.Sesame/UpdateRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sesameClient) ListRemotes(ctx context.Context, in *ListRemotesRequest, opts ...grpc.CallOption) (*ListRemotesResponse, error) {
	out := new(ListRemotesResponse)
	err := c.cc.Invoke(ctx, "/sesame.v1alpha1.Sesame/ListRemotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sesameClient) CallMethod(ctx context.Context, opts ...grpc.CallOption) (Sesame_CallMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sesame_ServiceDesc.Streams[0], "/sesame.v1alpha1.Sesame/CallMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &sesameCallMethodClient{stream}
	return x, nil
}

type Sesame_CallMethodClient interface {
	Send(*CallMethodRequest) error
	Recv() (*CallMethodResponse, error)
	grpc.ClientStream
}

type sesameCallMethodClient struct {
	grpc.ClientStream
}

func (x *sesameCallMethodClient) Send(m *CallMethodRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sesameCallMethodClient) Recv() (*CallMethodResponse, error) {
	m := new(CallMethodResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SesameServer is the server API for Sesame service.
// All implementations must embed UnimplementedSesameServer
// for forward compatibility
type SesameServer interface {
	CreateRemote(context.Context, *CreateRemoteRequest) (*Remote, error)
	GetRemote(context.Context, *GetRemoteRequest) (*Remote, error)
	DeleteRemote(context.Context, *DeleteRemoteRequest) (*emptypb.Empty, error)
	UpdateRemote(context.Context, *UpdateRemoteRequest) (*Remote, error)
	ListRemotes(context.Context, *ListRemotesRequest) (*ListRemotesResponse, error)
	CallMethod(Sesame_CallMethodServer) error
	mustEmbedUnimplementedSesameServer()
}

// UnimplementedSesameServer must be embedded to have forward compatible implementations.
type UnimplementedSesameServer struct {
}

func (UnimplementedSesameServer) CreateRemote(context.Context, *CreateRemoteRequest) (*Remote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemote not implemented")
}
func (UnimplementedSesameServer) GetRemote(context.Context, *GetRemoteRequest) (*Remote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemote not implemented")
}
func (UnimplementedSesameServer) DeleteRemote(context.Context, *DeleteRemoteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemote not implemented")
}
func (UnimplementedSesameServer) UpdateRemote(context.Context, *UpdateRemoteRequest) (*Remote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemote not implemented")
}
func (UnimplementedSesameServer) ListRemotes(context.Context, *ListRemotesRequest) (*ListRemotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRemotes not implemented")
}
func (UnimplementedSesameServer) CallMethod(Sesame_CallMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method CallMethod not implemented")
}
func (UnimplementedSesameServer) mustEmbedUnimplementedSesameServer() {}

// UnsafeSesameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SesameServer will
// result in compilation errors.
type UnsafeSesameServer interface {
	mustEmbedUnimplementedSesameServer()
}

func RegisterSesameServer(s grpc.ServiceRegistrar, srv SesameServer) {
	s.RegisterService(&Sesame_ServiceDesc, srv)
}

func _Sesame_CreateRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SesameServer).CreateRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sesame.v1alpha1.Sesame/CreateRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SesameServer).CreateRemote(ctx, req.(*CreateRemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sesame_GetRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SesameServer).GetRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sesame.v1alpha1.Sesame/GetRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SesameServer).GetRemote(ctx, req.(*GetRemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sesame_DeleteRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SesameServer).DeleteRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sesame.v1alpha1.Sesame/DeleteRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SesameServer).DeleteRemote(ctx, req.(*DeleteRemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sesame_UpdateRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SesameServer).UpdateRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sesame.v1alpha1.Sesame/UpdateRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SesameServer).UpdateRemote(ctx, req.(*UpdateRemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sesame_ListRemotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRemotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SesameServer).ListRemotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sesame.v1alpha1.Sesame/ListRemotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SesameServer).ListRemotes(ctx, req.(*ListRemotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sesame_CallMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SesameServer).CallMethod(&sesameCallMethodServer{stream})
}

type Sesame_CallMethodServer interface {
	Send(*CallMethodResponse) error
	Recv() (*CallMethodRequest, error)
	grpc.ServerStream
}

type sesameCallMethodServer struct {
	grpc.ServerStream
}

func (x *sesameCallMethodServer) Send(m *CallMethodResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sesameCallMethodServer) Recv() (*CallMethodRequest, error) {
	m := new(CallMethodRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Sesame_ServiceDesc is the grpc.ServiceDesc for Sesame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sesame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sesame.v1alpha1.Sesame",
	HandlerType: (*SesameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRemote",
			Handler:    _Sesame_CreateRemote_Handler,
		},
		{
			MethodName: "GetRemote",
			Handler:    _Sesame_GetRemote_Handler,
		},
		{
			MethodName: "DeleteRemote",
			Handler:    _Sesame_DeleteRemote_Handler,
		},
		{
			MethodName: "UpdateRemote",
			Handler:    _Sesame_UpdateRemote_Handler,
		},
		{
			MethodName: "ListRemotes",
			Handler:    _Sesame_ListRemotes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CallMethod",
			Handler:       _Sesame_CallMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sesame/v1alpha1/sesame.proto",
}
