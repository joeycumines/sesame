// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: sesame/v1alpha1/remotecontrol.proto

package rc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RemoteControl_NetConn_FullMethodName = "/sesame.v1alpha1.RemoteControl/NetConn"
)

// RemoteControlClient is the client API for RemoteControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RemoteControl implements methods that function as proxy implementations, where the server is the remote device, the
// proxy endpoint.
type RemoteControlClient interface {
	// NetConn implements a remote dialer, which may be used for a variety of purposes, including forwarding to other
	// gRPC services running in the same (server) process.
	//
	// If the server doesn't support this method, it returns `UNIMPLEMENTED`.
	//
	// The message flow is:
	//
	//  1. NetConnRequest.dial
	//  2. NetConnResponse.conn
	//  3. Any number of NetConnRequest.bytes and NetConnResponse.bytes
	//  4. Termination
	//     i. Graceful (client initiated)
	//     a. Initiated by grpc.ClientStream.CloseSend
	//     b. After processing all received messages the server initiates (full) connection close of the
	//     proxy target
	//     c. All data read from the proxy target is sent to the client
	//     d. The connection is closed by the server
	//     ii. Proxy target initiated
	//     a. The proxy target connection closes
	//     b. All buffered data received from the proxy target is sent to the client
	//     c. An error is propagated to the client
	//     iii. Server initiated
	//     a. The server encounters an error (e.g. due to context cancel)
	//     b. The proxy target connection is closed
	//     c. An error is propagated to the client (though there are common cases where it's already gone)
	NetConn(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NetConnRequest, NetConnResponse], error)
}

type remoteControlClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteControlClient(cc grpc.ClientConnInterface) RemoteControlClient {
	return &remoteControlClient{cc}
}

func (c *remoteControlClient) NetConn(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NetConnRequest, NetConnResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RemoteControl_ServiceDesc.Streams[0], RemoteControl_NetConn_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NetConnRequest, NetConnResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RemoteControl_NetConnClient = grpc.BidiStreamingClient[NetConnRequest, NetConnResponse]

// RemoteControlServer is the server API for RemoteControl service.
// All implementations must embed UnimplementedRemoteControlServer
// for forward compatibility.
//
// RemoteControl implements methods that function as proxy implementations, where the server is the remote device, the
// proxy endpoint.
type RemoteControlServer interface {
	// NetConn implements a remote dialer, which may be used for a variety of purposes, including forwarding to other
	// gRPC services running in the same (server) process.
	//
	// If the server doesn't support this method, it returns `UNIMPLEMENTED`.
	//
	// The message flow is:
	//
	//  1. NetConnRequest.dial
	//  2. NetConnResponse.conn
	//  3. Any number of NetConnRequest.bytes and NetConnResponse.bytes
	//  4. Termination
	//     i. Graceful (client initiated)
	//     a. Initiated by grpc.ClientStream.CloseSend
	//     b. After processing all received messages the server initiates (full) connection close of the
	//     proxy target
	//     c. All data read from the proxy target is sent to the client
	//     d. The connection is closed by the server
	//     ii. Proxy target initiated
	//     a. The proxy target connection closes
	//     b. All buffered data received from the proxy target is sent to the client
	//     c. An error is propagated to the client
	//     iii. Server initiated
	//     a. The server encounters an error (e.g. due to context cancel)
	//     b. The proxy target connection is closed
	//     c. An error is propagated to the client (though there are common cases where it's already gone)
	NetConn(grpc.BidiStreamingServer[NetConnRequest, NetConnResponse]) error
	mustEmbedUnimplementedRemoteControlServer()
}

// UnimplementedRemoteControlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRemoteControlServer struct{}

func (UnimplementedRemoteControlServer) NetConn(grpc.BidiStreamingServer[NetConnRequest, NetConnResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NetConn not implemented")
}
func (UnimplementedRemoteControlServer) mustEmbedUnimplementedRemoteControlServer() {}
func (UnimplementedRemoteControlServer) testEmbeddedByValue()                       {}

// UnsafeRemoteControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteControlServer will
// result in compilation errors.
type UnsafeRemoteControlServer interface {
	mustEmbedUnimplementedRemoteControlServer()
}

func RegisterRemoteControlServer(s grpc.ServiceRegistrar, srv RemoteControlServer) {
	// If the following call pancis, it indicates UnimplementedRemoteControlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RemoteControl_ServiceDesc, srv)
}

func _RemoteControl_NetConn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteControlServer).NetConn(&grpc.GenericServerStream[NetConnRequest, NetConnResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RemoteControl_NetConnServer = grpc.BidiStreamingServer[NetConnRequest, NetConnResponse]

// RemoteControl_ServiceDesc is the grpc.ServiceDesc for RemoteControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sesame.v1alpha1.RemoteControl",
	HandlerType: (*RemoteControlServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NetConn",
			Handler:       _RemoteControl_NetConn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sesame/v1alpha1/remotecontrol.proto",
}
