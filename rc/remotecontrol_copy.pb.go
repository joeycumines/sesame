// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: sesame/v1alpha1/remotecontrol.proto

package rc

import "github.com/joeycumines/sesame/genproto/type/netaddr"
import "google.golang.org/protobuf/types/known/durationpb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *NetConnRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *NetConnRequest:
		x.Data = v.GetData()
	default:
		if v, ok := v.(interface{ GetData() isNetConnRequest_Data }); ok {
			x.Data = v.GetData()
		} else {
			func() {
				if v, ok := v.(interface{ GetDial() *NetConnRequest_Dial }); ok {
					var defaultValue *NetConnRequest_Dial
					if v := v.GetDial(); v != defaultValue {
						x.Data = &NetConnRequest_Dial_{Dial: v}
						return
					}
				}
				if v, ok := v.(interface{ GetBytes() []byte }); ok {
					if v := v.GetBytes(); v != nil {
						x.Data = &NetConnRequest_Bytes{Bytes: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *NetConnRequest) Proto_ShallowClone() (c *NetConnRequest) {
	if x != nil {
		c = new(NetConnRequest)
		c.Data = x.Data
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *NetConnRequest_Dial) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *NetConnRequest_Dial:
		x.Address = v.GetAddress()
		x.Timeout = v.GetTimeout()
	default:
		if v, ok := v.(interface{ GetAddress() *netaddr.NetAddr }); ok {
			x.Address = v.GetAddress()
		}
		if v, ok := v.(interface{ GetTimeout() *durationpb.Duration }); ok {
			x.Timeout = v.GetTimeout()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *NetConnRequest_Dial) Proto_ShallowClone() (c *NetConnRequest_Dial) {
	if x != nil {
		c = new(NetConnRequest_Dial)
		c.Address = x.Address
		c.Timeout = x.Timeout
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *NetConnResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *NetConnResponse:
		x.Data = v.GetData()
	default:
		if v, ok := v.(interface{ GetData() isNetConnResponse_Data }); ok {
			x.Data = v.GetData()
		} else {
			func() {
				if v, ok := v.(interface{ GetConn() *NetConnResponse_Conn }); ok {
					var defaultValue *NetConnResponse_Conn
					if v := v.GetConn(); v != defaultValue {
						x.Data = &NetConnResponse_Conn_{Conn: v}
						return
					}
				}
				if v, ok := v.(interface{ GetBytes() []byte }); ok {
					if v := v.GetBytes(); v != nil {
						x.Data = &NetConnResponse_Bytes{Bytes: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *NetConnResponse) Proto_ShallowClone() (c *NetConnResponse) {
	if x != nil {
		c = new(NetConnResponse)
		c.Data = x.Data
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *NetConnResponse_Conn) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *NetConnResponse_Conn:
		x.Local = v.GetLocal()
		x.Remote = v.GetRemote()
	default:
		if v, ok := v.(interface{ GetLocal() *netaddr.NetAddr }); ok {
			x.Local = v.GetLocal()
		}
		if v, ok := v.(interface{ GetRemote() *netaddr.NetAddr }); ok {
			x.Remote = v.GetRemote()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *NetConnResponse_Conn) Proto_ShallowClone() (c *NetConnResponse_Conn) {
	if x != nil {
		c = new(NetConnResponse_Conn)
		c.Local = x.Local
		c.Remote = x.Remote
	}
	return
}
