openapi: 3.0.1
info:
  title: sesame/v1alpha1/sesame.proto
  contact:
    name: Sesame project
    url: https://github.com/joeycumines/sesame
  license:
    name: MIT License
    url: https://github.com/joeycumines/sesame/blob/main/LICENSE
  version: 0.1.0-alpha1
externalDocs:
  description: Source repository
  url: https://github.com/joeycumines/sesame
servers:
- url: /
tags:
- name: Sesame
paths:
  /v1alpha1/proxy:
    post:
      tags:
      - Sesame
      operationId: Sesame_Proxy
      requestBody:
        description: ' (streaming inputs)'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1alpha1ProxyRequest'
        required: true
      responses:
        "200":
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                title: Stream result of v1alpha1ProxyResponse
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/v1alpha1ProxyResponse'
                  error:
                    $ref: '#/components/schemas/rpcStatus'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v1alpha1/{name_1}:
    get:
      tags:
      - Sesame
      operationId: Sesame_GetEndpoint
      parameters:
      - name: name_1
        in: path
        required: true
        schema:
          pattern: "namespaces/[^/]+/remotes/[^/]+/endpoints/[^/]+"
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alpha1Endpoint'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
    delete:
      tags:
      - Sesame
      operationId: Sesame_DeleteEndpoint
      parameters:
      - name: name_1
        in: path
        required: true
        schema:
          pattern: "namespaces/[^/]+/remotes/[^/]+/endpoints/[^/]+"
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
    patch:
      tags:
      - Sesame
      operationId: Sesame_UpdateEndpoint
      parameters:
      - name: name_1
        in: path
        required: true
        schema:
          pattern: "namespaces/[^/]+/remotes/[^/]+/endpoints/[^/]+"
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1alpha1Endpoint'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alpha1Endpoint'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: endpoint
  /v1alpha1/{name}:
    get:
      tags:
      - Sesame
      operationId: Sesame_GetRemote
      parameters:
      - name: name
        in: path
        required: true
        schema:
          pattern: "namespaces/[^/]+/remotes/[^/]+"
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alpha1Remote'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
    delete:
      tags:
      - Sesame
      operationId: Sesame_DeleteRemote
      parameters:
      - name: name
        in: path
        required: true
        schema:
          pattern: "namespaces/[^/]+/remotes/[^/]+"
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
    patch:
      tags:
      - Sesame
      operationId: Sesame_UpdateRemote
      parameters:
      - name: name
        in: path
        required: true
        schema:
          pattern: "namespaces/[^/]+/remotes/[^/]+"
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1alpha1Remote'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alpha1Remote'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: remote
  /v1alpha1/{parent}/endpoints:
    get:
      tags:
      - Sesame
      operationId: Sesame_ListEndpoints
      parameters:
      - name: parent
        in: path
        required: true
        schema:
          pattern: "namespaces/[^/]+/remotes/[^/]+"
          type: string
      - name: pageSize
        in: query
        schema:
          type: integer
          format: int32
      - name: pageToken
        in: query
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alpha1ListEndpointsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
    post:
      tags:
      - Sesame
      operationId: Sesame_CreateEndpoint
      parameters:
      - name: parent
        in: path
        description: "The name of the parent Remote, note that endpoint.name MUST\
          \ NOT be set."
        required: true
        schema:
          pattern: "namespaces/[^/]+/remotes/[^/]+"
          type: string
      - name: resourceId
        in: query
        description: "May be specified to request a specific (non-trailing) resource\
          \ id, note it's a single path segment, w/o any \"/\"."
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1alpha1Endpoint'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alpha1Endpoint'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: endpoint
  /v1alpha1/{parent}/remotes:
    get:
      tags:
      - Sesame
      operationId: Sesame_ListRemotes
      parameters:
      - name: parent
        in: path
        required: true
        schema:
          pattern: "namespaces/[^/]+"
          type: string
      - name: pageSize
        in: query
        schema:
          type: integer
          format: int32
      - name: pageToken
        in: query
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alpha1ListRemotesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
    post:
      tags:
      - Sesame
      operationId: Sesame_CreateRemote
      parameters:
      - name: parent
        in: path
        description: "The name of the parent Namespace, note that remote.name MUST\
          \ NOT be set."
        required: true
        schema:
          pattern: "namespaces/[^/]+"
          type: string
      - name: resourceId
        in: query
        description: "May be specified to request a specific (non-trailing) resource\
          \ id, note it's a single path segment, w/o any \"/\"."
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1alpha1Remote'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alpha1Remote'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: remote
components:
  schemas:
    EndpointSpec:
      type: object
      properties:
        tunnel:
          $ref: '#/components/schemas/EndpointTunnel'
      description: "Spec models the endpoint specification, containing configuration\
        \ around access and usage behavior."
    EndpointTunnel:
      type: object
      description: |-
        Tunnel models an endpoint exposed directly over a tunnel provider.

        TODO might eventually make this configurable (more than one tunnel pattern)
    GrpcMetadataBin:
      type: object
      properties:
        values:
          type: array
          items:
            pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            type: string
            format: byte
    GrpcMetadataStr:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
    ProxyRequestDial:
      type: object
      properties:
        endpoint:
          type: string
        method:
          type: string
        connMask:
          type: string
          description: conn_mask is an optional field mask for ProxyResponse.conn.
      description: Dial models the initial request routing of a method call.
    ProxyResponseConn:
      type: object
      properties:
        namespace:
          $ref: '#/components/schemas/v1alpha1Namespace'
        remote:
          $ref: '#/components/schemas/v1alpha1Remote'
        endpoint:
          $ref: '#/components/schemas/v1alpha1Endpoint'
      description: Conn is the response to ProxyRequest.dial.
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com. As of May 2023, there are no widely used type server
            implementations and no plans to implement one.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
      additionalProperties:
        type: object
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".

        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          description: |-
            The status code, which should be an enum value of
            [google.rpc.Code][google.rpc.Code].
          format: int32
        message:
          type: string
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            [google.rpc.Status.details][google.rpc.Status.details] field, or localized
            by the client.
        details:
          type: array
          description: |-
            A list of messages that carry the error details.  There is a common set of
            message types for APIs to use.
          items:
            $ref: '#/components/schemas/protobufAny'
      description: |-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It is
        used by [gRPC](https://github.com/grpc). Each `Status` message contains
        three pieces of data: error code, error message, and error details.

        You can find out more about this error model and how to work with it in the
        [API Design Guide](https://cloud.google.com/apis/design/errors).
    typeGrpcMetadata:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/typeGrpcMetadataValue'
      description: "GrpcMetadata represents gRPC request or response (header, trailer)\
        \ metadata."
    typeGrpcMetadataValue:
      type: object
      properties:
        str:
          $ref: '#/components/schemas/GrpcMetadataStr'
        bin:
          $ref: '#/components/schemas/GrpcMetadataBin'
    v1alpha1Endpoint:
      type: object
      properties:
        name:
          type: string
          readOnly: true
        displayName:
          type: string
        description:
          type: string
        createTime:
          type: string
          format: date-time
          readOnly: true
        spec:
          $ref: '#/components/schemas/EndpointSpec'
      description: Endpoint is a gRPC service available via a remote.
    v1alpha1ListEndpointsResponse:
      type: object
      properties:
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1Endpoint'
        nextPageToken:
          type: string
    v1alpha1ListRemotesResponse:
      type: object
      properties:
        remotes:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1Remote'
        nextPageToken:
          type: string
    v1alpha1Namespace:
      type: object
      properties:
        name:
          type: string
          readOnly: true
      description: "Namespace scopes resources in the Sesame API, and is intended\
        \ to (eventually) facilitate scoped simple auth."
    v1alpha1ProxyRequest:
      type: object
      properties:
        dial:
          $ref: '#/components/schemas/ProxyRequestDial'
        header:
          $ref: '#/components/schemas/typeGrpcMetadata'
        content:
          $ref: '#/components/schemas/protobufAny'
    v1alpha1ProxyResponse:
      type: object
      properties:
        conn:
          $ref: '#/components/schemas/ProxyResponseConn'
        error:
          $ref: '#/components/schemas/rpcStatus'
        header:
          $ref: '#/components/schemas/typeGrpcMetadata'
        content:
          $ref: '#/components/schemas/protobufAny'
        trailer:
          $ref: '#/components/schemas/typeGrpcMetadata'
    v1alpha1Remote:
      type: object
      properties:
        name:
          type: string
          readOnly: true
        displayName:
          type: string
        description:
          type: string
        createTime:
          type: string
          format: date-time
          readOnly: true
      description: Remote is a network device or other resource that may be accessed
        by Sesame clients.
x-original-swagger-version: "2.0"
