// This file was originally based on
// https://github.com/jhump/grpctunnel/blob/525f1361e55b62188ee09dedceed5b12a6fdb0f3/tunnel.proto
// See the license below.

/*
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2018 Joshua Humphries

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

syntax = "proto3";

package sesame.type;

option go_package = "github.com/joeycumines/sesame/tun/grpc";

import "google/protobuf/empty.proto";
import "google/rpc/status.proto";
import "sesame/type/grpcmetadata.proto";

service TunnelService {
  // OpenTunnel creates a channel to the server which can be used to send
  // additional RPCs, all of which will be sent to the same server via a
  // single underlying gRPC stream. This can provide affinity for a "chatty"
  // sequence of calls, where the gRPC connection is load balanced (so there
  // may be multiple backend servers), but a particular "conversation" (which
  // may consist of numerous RPCs) needs to all go to a single server, for
  // consistency.
  rpc OpenTunnel(stream ClientToServer) returns (stream ServerToClient);
  // OpenReverseTunnel creates a "reverse" channel, which allows the server to
  // act as a client and send RPCs to the client that creates the tunnel. It
  // is in most respects identical to OpenTunnel except that the roles are
  // reversed: the server initiates RPCs and sends requests and the client
  // replies to them and sends responses.
  rpc OpenReverseTunnel(stream ServerToClient) returns (stream ClientToServer);
}

// ClientToServer is the message a client sends to a server.
//
// For a single stream ID, the first such message must include the new_stream
// field. After that, there can be any number of requests sent, via the
// request_message field and additional messages thereafter that use the
// more_request_data field (for requests that are larger than 16kb). And
// finally, the RPC ends with either the half_close or cancel fields. If the
// half_close field is used, the RPC stream remains active so the server may
// continue to send response data. But, if the cancel field is used, the RPC
// stream is aborted and thus closed on both client and server ends. If a stream
// has been half-closed, the only allowed message from the client for that
// stream ID is one with the cancel field, to abort the remainder of the
// operation.
message ClientToServer {
  // The ID of the stream. Stream IDs must be used in increasing order and
  // cannot be re-used. Unlike in the HTTP/2 protocol, the stream ID is 64-bit
  // so overflow in a long-lived channel is excessively unlikely. (If the
  // channel were used for a stream every nanosecond, it would take close to
  // 300 years to exhaust every ID and reach an overflow situation.)
  int64 stream_id = 1;

  oneof frame {
    // Creates a new RPC stream, which includes request header metadata. The
    // stream ID must not be an already active stream.
    NewStream new_stream = 2;
    // Sends a message on the RPC stream. If the message is larger than 16k,
    // the rest of the message should be sent in chunks using the
    // more_request_data field (up to 16kb of data in each chunk).
    MessageData request_message = 3;
    // Sends a chunk of request data, for a request message that could not
    // wholly fit in a request_message field (e.g. > 16kb).
    bytes more_request_data = 4;
    // Half-closes the stream, signaling that no more request messages will
    // be sent. No other messages, other than one with the cancel field set,
    // should be sent for this stream (at least not until it is terminated
    // by the server, after which the ID can be re-used).
    google.protobuf.Empty half_close = 5;
    // Aborts the stream. No other messages should be sent for this stream
    // (unless the ID is being re-used after the stream is terminated on the
    // server side).
    google.protobuf.Empty cancel = 6;
  }
}

// ServerToClient is the message a server sends to a client.
//
// For a single stream ID, the first such message should include the
// response_headers field unless no headers are to be sent. After the headers,
// the server can send any number of responses, via the response_message field
// and additional messages thereafter that use the more_response_data field (for
// responses that are larger than 16kb). A message with the close_stream field
// concludes the stream, whether it terminates successfully or with an error.
message ServerToClient {
  // The ID of the stream. Stream IDs are defined by the client and should be
  // used in monotonically increasing order. They cannot be re-used. Unlike
  // HTTP/2, the ID is 64-bit, so overflow/re-use should not be an issue. (If
  // the channel were used for a stream every nanosecond, it would take close
  // to 300 years to exhaust every ID and reach an overflow situation.)
  int64 stream_id = 1;

  oneof frame {
    // Sends response headers for this stream. If headers are sent at all,
    // they must be sent before any response message data.
    type.GrpcMetadata response_headers = 2;
    // Sends a message on the RPC stream. If the message is larger than 16k,
    // the rest of the message should be sent in chunks using the
    // more_response_data field (up to 16kb of data in each chunk).
    MessageData response_message = 3;
    // Sends a chunk of response data, for a response message that could not
    // wholly fit in a response_message field (e.g. > 16kb).
    bytes more_response_data = 4;
    // Terminates the stream and communicates the final disposition to the
    // client. After the stream is closed, no other messages should use the
    // given stream ID until the ID is re-used (e.g. a NewStream message is
    // received that creates another stream with the same ID).
    CloseStream close_stream = 5;
  }
}

message NewStream {
  string method_name = 1;
  type.GrpcMetadata request_headers = 2;
}

message MessageData {
  // The full size of the message.
  int32 size = 1;
  // The message data. This field should not be longer than 16kb (16,384
  // bytes). If the full size of the message is larger then it should be
  // split into multiple chunks. The chunking is done to allow multiple
  // access to the underlying gRPC stream by concurrent tunneled streams.
  // If very large messages were sent via a single chunk, it could cause
  // head-of-line blocking and starvation when multiple streams need to send
  // data on the one underlying gRPC stream.
  bytes data = 2;
}

message CloseStream {
  type.GrpcMetadata response_trailers = 1;
  google.rpc.Status status = 2;
}
