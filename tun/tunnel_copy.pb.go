// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: sesame/v1alpha1/tunnel.proto

package tun

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TunnelRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TunnelRequest:
		x.Data = v.GetData()
	default:
		if v, ok := v.(interface{ GetData() isTunnelRequest_Data }); ok {
			x.Data = v.GetData()
		} else {
			func() {
				if v, ok := v.(interface{ GetConnect() *TunnelRequest_Connect }); ok {
					var defaultValue *TunnelRequest_Connect
					if v := v.GetConnect(); v != defaultValue {
						x.Data = &TunnelRequest_Connect_{Connect: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TunnelRequest) Proto_ShallowClone() (c *TunnelRequest) {
	if x != nil {
		c = new(TunnelRequest)
		c.Data = x.Data
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TunnelRequest_Connect) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TunnelRequest_Connect) Proto_ShallowClone() (c *TunnelRequest_Connect) {
	if x != nil {
		c = new(TunnelRequest_Connect)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TunnelResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *TunnelResponse:
		x.Data = v.GetData()
	default:
		if v, ok := v.(interface{ GetData() isTunnelResponse_Data }); ok {
			x.Data = v.GetData()
		} else {
			func() {
				if v, ok := v.(interface {
					GetConnect() *TunnelResponse_Connect
				}); ok {
					var defaultValue *TunnelResponse_Connect
					if v := v.GetConnect(); v != defaultValue {
						x.Data = &TunnelResponse_Connect_{Connect: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TunnelResponse) Proto_ShallowClone() (c *TunnelResponse) {
	if x != nil {
		c = new(TunnelResponse)
		c.Data = x.Data
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *TunnelResponse_Connect) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *TunnelResponse_Connect) Proto_ShallowClone() (c *TunnelResponse_Connect) {
	if x != nil {
		c = new(TunnelResponse_Connect)
	}
	return
}
