// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: sesame/type/grpctunnel.proto

package grpc

import "github.com/joeycumines/sesame/genproto/type/grpcmetadata"
import "google.golang.org/genproto/googleapis/rpc/status"
import "google.golang.org/protobuf/types/known/emptypb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ClientToServer) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ClientToServer:
		x.StreamId = v.GetStreamId()
		x.Frame = v.GetFrame()
	default:
		if v, ok := v.(interface{ GetStreamId() int64 }); ok {
			x.StreamId = v.GetStreamId()
		}
		if v, ok := v.(interface{ GetFrame() isClientToServer_Frame }); ok {
			x.Frame = v.GetFrame()
		} else {
			func() {
				if v, ok := v.(interface{ GetNewStream() *NewStream }); ok {
					var defaultValue *NewStream
					if v := v.GetNewStream(); v != defaultValue {
						x.Frame = &ClientToServer_NewStream{NewStream: v}
						return
					}
				}
				if v, ok := v.(interface{ GetRequestMessage() *MessageData }); ok {
					var defaultValue *MessageData
					if v := v.GetRequestMessage(); v != defaultValue {
						x.Frame = &ClientToServer_RequestMessage{RequestMessage: v}
						return
					}
				}
				if v, ok := v.(interface{ GetMoreRequestData() []byte }); ok {
					if v := v.GetMoreRequestData(); v != nil {
						x.Frame = &ClientToServer_MoreRequestData{MoreRequestData: v}
						return
					}
				}
				if v, ok := v.(interface{ GetHalfClose() *emptypb.Empty }); ok {
					var defaultValue *emptypb.Empty
					if v := v.GetHalfClose(); v != defaultValue {
						x.Frame = &ClientToServer_HalfClose{HalfClose: v}
						return
					}
				}
				if v, ok := v.(interface{ GetCancel() *emptypb.Empty }); ok {
					var defaultValue *emptypb.Empty
					if v := v.GetCancel(); v != defaultValue {
						x.Frame = &ClientToServer_Cancel{Cancel: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ClientToServer) Proto_ShallowClone() (c *ClientToServer) {
	if x != nil {
		c = new(ClientToServer)
		c.StreamId = x.StreamId
		c.Frame = x.Frame
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ServerToClient) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ServerToClient:
		x.StreamId = v.GetStreamId()
		x.Frame = v.GetFrame()
	default:
		if v, ok := v.(interface{ GetStreamId() int64 }); ok {
			x.StreamId = v.GetStreamId()
		}
		if v, ok := v.(interface{ GetFrame() isServerToClient_Frame }); ok {
			x.Frame = v.GetFrame()
		} else {
			func() {
				if v, ok := v.(interface {
					GetResponseHeaders() *grpcmetadata.GrpcMetadata
				}); ok {
					var defaultValue *grpcmetadata.GrpcMetadata
					if v := v.GetResponseHeaders(); v != defaultValue {
						x.Frame = &ServerToClient_ResponseHeaders{ResponseHeaders: v}
						return
					}
				}
				if v, ok := v.(interface{ GetResponseMessage() *MessageData }); ok {
					var defaultValue *MessageData
					if v := v.GetResponseMessage(); v != defaultValue {
						x.Frame = &ServerToClient_ResponseMessage{ResponseMessage: v}
						return
					}
				}
				if v, ok := v.(interface{ GetMoreResponseData() []byte }); ok {
					if v := v.GetMoreResponseData(); v != nil {
						x.Frame = &ServerToClient_MoreResponseData{MoreResponseData: v}
						return
					}
				}
				if v, ok := v.(interface{ GetCloseStream() *CloseStream }); ok {
					var defaultValue *CloseStream
					if v := v.GetCloseStream(); v != defaultValue {
						x.Frame = &ServerToClient_CloseStream{CloseStream: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ServerToClient) Proto_ShallowClone() (c *ServerToClient) {
	if x != nil {
		c = new(ServerToClient)
		c.StreamId = x.StreamId
		c.Frame = x.Frame
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *NewStream) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *NewStream:
		x.MethodName = v.GetMethodName()
		x.RequestHeaders = v.GetRequestHeaders()
	default:
		if v, ok := v.(interface{ GetMethodName() string }); ok {
			x.MethodName = v.GetMethodName()
		}
		if v, ok := v.(interface {
			GetRequestHeaders() *grpcmetadata.GrpcMetadata
		}); ok {
			x.RequestHeaders = v.GetRequestHeaders()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *NewStream) Proto_ShallowClone() (c *NewStream) {
	if x != nil {
		c = new(NewStream)
		c.MethodName = x.MethodName
		c.RequestHeaders = x.RequestHeaders
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *MessageData) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *MessageData:
		x.Size = v.GetSize()
		x.Data = v.GetData()
	default:
		if v, ok := v.(interface{ GetSize() rune }); ok {
			x.Size = v.GetSize()
		}
		if v, ok := v.(interface{ GetData() []byte }); ok {
			x.Data = v.GetData()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *MessageData) Proto_ShallowClone() (c *MessageData) {
	if x != nil {
		c = new(MessageData)
		c.Size = x.Size
		c.Data = x.Data
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CloseStream) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CloseStream:
		x.ResponseTrailers = v.GetResponseTrailers()
		x.Status = v.GetStatus()
	default:
		if v, ok := v.(interface {
			GetResponseTrailers() *grpcmetadata.GrpcMetadata
		}); ok {
			x.ResponseTrailers = v.GetResponseTrailers()
		}
		if v, ok := v.(interface{ GetStatus() *status.Status }); ok {
			x.Status = v.GetStatus()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CloseStream) Proto_ShallowClone() (c *CloseStream) {
	if x != nil {
		c = new(CloseStream)
		c.ResponseTrailers = x.ResponseTrailers
		c.Status = x.Status
	}
	return
}
